{"version":3,"sources":["webpack:///src/components/Tetris.vue","webpack:///./src/components/Tetris.vue?4a25","webpack:///./src/components/Tetris.vue","webpack:///src/App.vue","webpack:///./src/App.vue?de7e","webpack:///./src/App.vue","webpack:///./src/main.js"],"names":["Tetris","name","mounted","this","ctx","document","querySelector","getContext","canvas","width","tetrisCfgs","column","unitSize","height","row","data","lastTime","current","elapsed","delta","tick","gameSpeed","rotateDelay","moveDelay","rotateReady","moveReady","iFPS","tetrisCenter","tetrisGrid","gameMsg","score","loop","touchBottom","brick","brickPatterns","gamePad","up","right","down","left","methods","game","timestamp","requestAnimationFrame","update","render","init","initBrickPatterns","i","tetrisRow","j","push","status","x","y","loadController","generateBrick","dropBrick","rotateBrick","moveBrick","examineGameOver","clearRect","sX","sY","fillRect","start","pause","cancelAnimationFrame","center","_this","patternIndex","Math","floor","random","length","coord","JSON","parse","stringify_default","type","dir","bottomLimit","reduce","max","cur","leftLimit","min","rightLimit","forEach","_this2","brickTouchBottom","brickCollideBot","clearRow","map","_this3","brickCollideLeft","setTimeout","brickCollideRight","_this4","nextDir","preview","_i","newCoord","some","_this5","addEventListener","e","keyCode","_this6","_this7","_this8","clearedRow","result","index","every","col","newRow","_i2","splice","unshift","_i3","components_Tetris","_vm","_h","$createElement","_c","_self","_v","_s","attrs","id","on","click","staticRenderFns","App","components","__webpack_require__","normalizeComponent","ssrContext","selectortype_template_index_0_src_App","src_App","App_normalizeComponent","vue_esm","config","productionTip","el","template"],"mappings":"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IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,GAAA,IAAAD,EAAAe,EAAA,EAAAd,EAAA,MACAD,EAAAe,EAAAd,GAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAA,EAAAd,EAAA,QAGAD,EAAAe,EAAA,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAA,EAAAd,EAAA,MACAD,EAAAe,EAAA,EAAAd,GAAA,IAAAD,EAAAe,EAAA,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,QAGAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAA,EAAAd,EAAA,IAAAD,EAAAe,EAAA,EAAAd,EAAA,QAGAD,EAAAe,EAAA,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,MACAD,EAAAe,EAAA,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,GAAA,MACAD,EAAAe,EAAAd,GAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAA,EAAAd,EAAA,MACAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAA,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,QAGAD,EAAAe,EAAA,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAA,EAAAd,EAAA,MACAD,EAAAe,EAAAd,GAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,QAGAD,EAAAe,EAAA,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAA,EAAAd,EAAA,MACAD,EAAAe,EAAAd,GAAA,IAAAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,QAGAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAA,EAAAd,EAAA,MACAD,EAAAe,EAAAd,EAAA,IAAAD,EAAAe,EAAAd,EAAA,QAGAD,EAAAe,EAAAd,EAAA,OAIAE,cA/HA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","file":"static/js/app.ff7efa82240600078981.js","sourcesContent":["<template>\n  <div>\n    <p>{{gameMsg}}</p>\n    <p>Score: {{score}}</p>\n    <canvas id=\"canvas\"></canvas>\n    <button @click=\"start\">Start</button>\n    <button @click=\"pause\">Pause</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Tetris',\n  mounted() {\n    /* Setup canvas */\n    this.ctx = document.querySelector('#canvas').getContext('2d');\n    this.ctx.canvas.width = this.tetrisCfgs.column * this.tetrisCfgs.unitSize;\n    this.ctx.canvas.height = this.tetrisCfgs.row * this.tetrisCfgs.unitSize;\n  },\n  data () {\n    return {\n      lastTime: 0,\n      current: 0,\n      elapsed: 0,\n      delta: 0,\n      tick: 0,\n      gameSpeed: 30,\n      rotateDelay: 200,\n      moveDelay: 50,\n      rotateReady: true,\n      moveReady: true,\n      iFPS: 60,\n      canvas: null,\n      ctx: null,\n      tetrisCfgs: {\n        row: 20,\n        column: 10,\n        unitSize: 30,\n      },\n      tetrisCenter: 0,\n      tetrisGrid: [],\n      gameMsg: null,\n      score: 0,\n      loop: null,\n      // For brick life cycle\n      touchBottom: true,\n      // Brick on control\n      brick: {},\n      brickPatterns: [],\n      gamePad: {\n        up: false,\n        right: false,\n        down: false,\n        left: false\n      }\n    }\n  },\n  methods: {\n    game(timestamp) {\n      this.current = timestamp;\n      this.elapsed = this.current - this.lastTime;\n      this.tick = this.tick + 1; \n\n      if(this.elapsed < 1000 / this.iFPS) {\n        this.loop = requestAnimationFrame(this.game);\n        return;\n      };\n      this.loop = requestAnimationFrame(this.game);\n\n      this.update();\n      this.render();\n      this.lastTime = this.current;\n    },\n    init() {\n      // init brick patterns\n      this.initBrickPatterns(this.tetrisCfgs.column / 2 - 1);\n\n      // init data array\n      this.tetrisGrid = [];\n      for(let i = 0; i < this.tetrisCfgs.row; i++) {\n        let tetrisRow = [];\n        for(let j = 0; j < this.tetrisCfgs.column; j++) {\n          tetrisRow.push({\n            status: 0,\n            x: j * this.tetrisCfgs.unitSize,\n            y: i * this.tetrisCfgs.unitSize\n          });\n        }\n        this.tetrisGrid.push(tetrisRow);\n      }\n\n      // init score\n      this.score = 0;\n      // init gameMsg\n      this.gameMsg = null;\n\n      // load controller\n      this.loadController();\n    },\n    update() {\n      // bricks life cycle\n      if(!this.touchBottom) {\n        if(this.tick >= this.gameSpeed) {\n          this.dropBrick();\n          this.tick %= this.gameSpeed;\n        }\n\n\n        switch(true) {\n          case this.gamePad.up: this.rotateBrick(); break;\n          case this.gamePad.down: this.dropBrick(); break;\n          case this.gamePad.left: this.moveBrick('left'); break;\n          case this.gamePad.right: this.moveBrick('right'); break;\n        }\n\n      } else {\n        this.generateBrick();\n        this.touchBottom = false;\n      }\n      this.examineGameOver();\n    },\n    render() {\n      // Clear the previous frame\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n      // Render bricks\n      for(let i = 0; i < this.tetrisCfgs.row; i++) {\n        for(let j = 0; j < this.tetrisCfgs.column; j++) {\n          if(this.tetrisGrid[i][j].status !== 0) {\n            let sX = this.tetrisGrid[i][j].x;\n            let sY = this.tetrisGrid[i][j].y;\n            this.ctx.fillRect(sX, sY, this.tetrisCfgs.unitSize, this.tetrisCfgs.unitSize);\n          }\n        }\n      }\n    },\n    start() {\n      this.init();\n      this.loop = requestAnimationFrame(this.game);\n    },\n    pause() {\n      cancelAnimationFrame(this.loop);\n    },\n    initBrickPatterns(center) {\n      this.brickPatterns = [\n          [\n            [{x: center-1, y:0}, {x: center, y:0}, {x: center+1, y:0}, {x: center+2, y:0}],\n            [{x: center, y:-1}, {x: center, y:0}, {x: center, y:1}, {x: center, y:2}]\n          ],\n          [\n            [{x: center-1, y:0}, {x: center, y:0}, {x: center, y:1}, {x: center+1, y:0}],\n            [{x: center-1, y:0}, {x: center, y:-1}, {x: center, y:0}, {x: center, y:1}],\n            [{x: center-1, y:0}, {x: center, y:0}, {x: center, y:-1}, {x: center+1, y:0}],\n            [{x: center, y:-1}, {x: center, y:0}, {x: center, y:1}, {x: center+1, y:0}]\n          ],\n          [\n            [{x: center-1, y:1}, {x: center, y:0}, {x: center, y:1}, {x: center+1, y:0}],\n            [{x: center-1, y:-1}, {x: center-1, y:0}, {x: center, y:0}, {x: center, y:1}]\n          ],\n          [\n            [{x: center, y:0}, {x: center, y:1}, {x: center+1, y:0}, {x: center+1, y:1}]\n          ],\n          [\n            [{x: center-1, y:0}, {x: center, y:0}, {x: center, y:1}],\n            [{x: center-1, y:0}, {x: center, y:0}, {x: center, y:-1}],\n            [{x: center, y:-1}, {x: center, y:0}, {x: center+1, y:0}],\n            [{x: center, y:0}, {x: center+1, y:0}, {x: center, y:1}]\n          ],\n          [\n            [{x: center-1, y:0}, {x: center, y:0}, {x: center+1, y:0}],\n            [{x: center, y:-1}, {x: center, y:0}, {x: center, y:1}]\n          ],\n          [\n            [{x: center-1, y:0}, {x: center, y:0}, {x: center+1, y:0}],\n            [{x: center, y:-1}, {x: center, y:0}, {x: center, y:1}]\n          ],\n          [\n            [{x: center, y:0}, {x: center+1, y:0}],\n            [{x: center, y:0}, {x: center, y:1}]\n          ],\n          [\n            [{x: center, y:0}]\n          ]\n      ];\n    },\n    generateBrick() {\n      // Create a new brick\n      this.brick = {};\n      // Choose a random pattern\n      let patternIndex = Math.floor(Math.random() * this.brickPatterns.length);\n      // Set brick coordination\n      this.brick.coord = JSON.parse(JSON.stringify(this.brickPatterns[patternIndex][0]));\n      // Set brick properties\n      this.brick.type = patternIndex;\n      this.brick.dir = 0;\n      this.brick.bottomLimit = this.brick.coord.reduce((max, cur) => Math.max(max, cur.y), 0);\n      this.brick.leftLimit = this.brick.coord.reduce((min, cur) => Math.min(min, cur.x), this.tetrisCfgs.column - 1);\n      this.brick.rightLimit = this.brick.coord.reduce((max, cur) => Math.max(max, cur.x), 0);\n      this.brick.coord.forEach(coord => {\n        this.tetrisGrid[coord.y][coord.x].status = 1;\n      });\n    },\n    dropBrick() {\n      // Drop Brick if haven't touch ground yet\n      if(!this.brickTouchBottom() && !this.brickCollideBot()) {\n        // Clear previous position\n        this.brick.coord.forEach(coord => {\n          this.tetrisGrid[coord.y][coord.x].status = 0;\n        });\n        // Update brick position\n        this.brick.coord = this.brick.coord.map(coord => {\n          coord.y += 1;\n          return coord;\n        });\n        // Update brick properties\n        this.brick.bottomLimit += 1;\n        // Mark new position\n        this.brick.coord.forEach(coord => {\n          this.tetrisGrid[coord.y][coord.x].status = 1;\n        });\n      } else {\n        // Release the controlled brick\n        this.brick.coord.forEach(coord => {\n          this.tetrisGrid[coord.y][coord.x].status = 2;\n        });\n        this.brick.coord = [];\n        // Switch flag: brick has touched the ground\n        this.touchBottom = true;\n        // Clear if any row is full\n        this.clearRow();\n      }\n    },\n    moveBrick(dir) {\n      if(!this.moveReady) return;\n      if(dir === 'left' && !this.brickCollideLeft()) {\n        this.moveReady = false;\n        // Clear previous position\n        this.brick.coord.forEach(coord => {\n          this.tetrisGrid[coord.y][coord.x].status = 0;\n        });\n        // Update brick position\n        this.brick.coord = this.brick.coord.map(coord => {\n          coord.x -= 1;\n          return coord;\n        });\n        // Update brick base line\n        this.brick.leftLimit -= 1;\n        this.brick.rightLimit -= 1;\n        // Mark new position\n        this.brick.coord.forEach(coord => {\n          this.tetrisGrid[coord.y][coord.x].status = 1;\n        });\n        // set input to ready\n        setTimeout(() => {this.moveReady = true;}, this.moveDelay)\n      }\n\n      if(dir === 'right' && !this.brickCollideRight()) {\n        this.moveReady = false;\n        // Clear previous position\n        this.brick.coord.forEach(coord => {\n          this.tetrisGrid[coord.y][coord.x].status = 0;\n        });\n        // Update brick position\n        this.brick.coord = this.brick.coord.map(coord => {\n          coord.x += 1;\n          return coord;\n        });\n        // Update brick base line\n        this.brick.leftLimit += 1;\n        this.brick.rightLimit += 1;\n        // Mark new position\n        this.brick.coord.forEach(coord => {\n          this.tetrisGrid[coord.y][coord.x].status = 1;\n        });\n        // set input to ready\n        setTimeout(() => {this.moveReady = true;}, this.moveDelay)\n      }\n    },\n    rotateBrick() {\n      if(!this.rotateReady) return;\n      this.rotateReady = false;\n      // Get the diff between rotate patterns\n      let delta = [];\n      let type = this.brick.type;\n      let dir = this.brickPatterns[this.brick.type].length;\n      let nextDir = (this.brick.dir + 1) % dir;\n      for(let i = 0; i < this.brickPatterns[type][this.brick.dir].length; i++) {\n        let coord = {\n          x: this.brickPatterns[type][nextDir][i].x - this.brickPatterns[type][this.brick.dir][i].x,\n          y: this.brickPatterns[type][nextDir][i].y - this.brickPatterns[type][this.brick.dir][i].y\n        }\n        delta.push(coord);\n      }\n\n      // make a preview of rotated brick\n      let preview = [];\n      for(let i = 0; i < this.brick.coord.length; i++) {\n        let newCoord = {\n          x: this.brick.coord[i].x + delta[i].x,\n          y: this.brick.coord[i].y + delta[i].y\n        };\n        preview.push(newCoord);\n      }\n\n      // preview can't collide with wall\n      let collideWithWall = preview.some(coord => {\n        return coord.x < 0 || coord.x >= this.tetrisCfgs.column || coord.y < 0 || coord.y >= this.tetrisCfgs.row;\n      })\n      if(collideWithWall) {\n        this.rotateReady = true;\n        return;\n      }\n\n      // preview can't collide with other bricks\n      let collideWithBricks = preview.some(coord => {\n        return this.tetrisGrid[coord.y][coord.x].status === 2;\n      })\n      if(collideWithBricks) {\n        this.rotateReady = true;\n        return;\n      }\n\n      // if no collision, update brick position\n      this.brick.coord.forEach(coord => {\n        this.tetrisGrid[coord.y][coord.x].status = 0;\n      });\n      this.brick.coord = JSON.parse(JSON.stringify(preview));\n      this.brick.coord.forEach(coord => {\n        this.tetrisGrid[coord.y][coord.x].status = 1;\n      });\n      this.brick.bottomLimit = this.brick.coord.reduce((max, cur) => Math.max(max, cur.y), 0);\n      this.brick.leftLimit = this.brick.coord.reduce((min, cur) => Math.min(min, cur.x), this.tetrisCfgs.column - 1);\n      this.brick.rightLimit = this.brick.coord.reduce((max, cur) => Math.max(max, cur.x), 0);\n      // update direction\n      this.brick.dir = nextDir;\n\n      // set input to ready\n      setTimeout(() => {this.rotateReady = true;}, this.rotateDelay)\n    },\n    loadController() {\n      addEventListener('keydown', e => {\n        if(e.keyCode === 38) {\n          this.gamePad.up = true;\n        }\n\n        if(e.keyCode === 40) {\n          this.gamePad.down = true;\n        }\n\n        if(e.keyCode === 37) {\n          this.gamePad.left = true;\n        } else if(e.keyCode === 39) {\n          this.gamePad.right = true;\n        }\n      });\n      addEventListener('keyup', e => {\n        if(e.keyCode === 38) {\n          this.gamePad.up = false;\n        }\n\n        if(e.keyCode === 40) {\n          this.gamePad.down = false;\n        }\n\n        if(e.keyCode === 37) {\n          this.gamePad.left = false;\n        } else if(e.keyCode === 39) {\n          this.gamePad.right = false;\n        }\n      });\n    },\n    brickTouchBottom() {\n      return this.brick.bottomLimit >= this.tetrisCfgs.row - 1;\n    },\n    brickCollideBot() {\n      return this.brick.coord.some(coord => {\n        return this.tetrisGrid[coord.y+1][coord.x].status === 2;\n      });\n    },\n    brickCollideLeft() {\n      if(this.brick.leftLimit <= 0) return true;\n      return this.brick.coord.some(coord => {\n        return this.tetrisGrid[coord.y][coord.x-1].status === 2;\n      });\n    },\n    brickCollideRight() {\n      if(this.brick.rightLimit >= this.tetrisCfgs.column - 1) return true;\n      return this.brick.coord.some(coord => {\n        return this.tetrisGrid[coord.y][coord.x+1].status === 2;\n      });\n    },\n    clearRow() {\n      let clearedRow = [];\n      let result = this.tetrisGrid.map((row, index) => {\n        let rowIsFull = row.every(col => col.status === 2);\n        if(rowIsFull) {\n          clearedRow.push(index)\n          return row.map(col => {\n            let obj = {\n              status: 0\n            }\n            return obj;\n          });\n        } else {\n          return JSON.parse(JSON.stringify(row));\n        }\n      });\n      let newRow = [];\n      for(let i = 0; i < this.tetrisCfgs.column; i++) {\n       newRow.push({status: 0}) ;\n      }\n      for(let i = 0; i < clearedRow.length; i++) {\n        result.splice(clearedRow[i], 1)\n        result.unshift(newRow);\n      }\n\n      if(clearedRow.length > 0) {\n        for(let i = 0; i < this.tetrisCfgs.row; i++) {\n          for(let j = 0; j < this.tetrisCfgs.column; j++) {\n           this.tetrisGrid[i][j].status = result[i][j].status;\n          }\n        }\n      }\n      this.score += clearedRow.length * 5;\n      clearedRow = [];\n    },\n    examineGameOver() {\n      let touchTop = this.tetrisGrid[0].some(col => col.status === 2);\n      if(touchTop) {\n        this.gameMsg = 'Game Over';\n        this.pause();\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n#canvas {\n  border: 2px solid black;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Tetris.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('p',[_vm._v(_vm._s(_vm.gameMsg))]),_vm._v(\" \"),_c('p',[_vm._v(\"Score: \"+_vm._s(_vm.score))]),_vm._v(\" \"),_c('canvas',{attrs:{\"id\":\"canvas\"}}),_vm._v(\" \"),_c('button',{on:{\"click\":_vm.start}},[_vm._v(\"Start\")]),_vm._v(\" \"),_c('button',{on:{\"click\":_vm.pause}},[_vm._v(\"Pause\")])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-3f796014\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Tetris.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-3f796014\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Tetris.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Tetris.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Tetris.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-3f796014\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Tetris.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-3f796014\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Tetris.vue\n// module id = null\n// module chunks = ","<template>\n  <div id=\"app\">\n    <Tetris/>\n  </div>\n</template>\n\n<script>\nimport Tetris from './components/Tetris'\n\nexport default {\n  name: 'App',\n  components: {\n    Tetris\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/App.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('Tetris')],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-18f61a36\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-18f61a36\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n}\nvar normalizeComponent = require(\"!../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\nimport __vue_script__ from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\n/* template */\nimport __vue_template__ from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-18f61a36\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./App.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.vue\n// module id = null\n// module chunks = ","// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  components: { App },\n  template: '<App/>'\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js"],"sourceRoot":""}